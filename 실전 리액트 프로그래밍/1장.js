1.1 리액트란?
    리액트는 페이스북에서 개발하고 관리하는 UI 라이브러리이다. 리액트는 UI 기능만 제공한다.
    따라서 전역 상태 관리, 라우팅, 빌드 시스템 등을 각 개발자가 직접 구축해야 한다.
    리액트와 같은 프런트엔드 라이브러리 혹은 프레임워크를 사용하는 이유는 UI를 자동으로 업데이트해 준다는 점이다.
    대개 프로그램의 상태가 변하면 UI도 변경된다 이는 UI = render(state) 로 표현할 수 있다.

    리액트의 장점은 가상 돔을 통해서 UI를 빠르게 업데이트한다는 점이다. 가상 돔은 이전 UI 상태를 메모리에 유지해서,
    변경될 UI의 최소 집합을 계산하는 기술이다. 가상 돔 덕분에 불필요한 UI 업데이트는 줄고, 성능은 좋아진다.
    리액트는 함수형 프로그래밍을 적극적으로 활용한다는 특징이 있다. 예를 들면 render 함수는 순수함수이고,
    state는 불변 함수로 관리한다. reder 함수는 순수 함수여야 하므로 인수 state가 변하지 않으면 항상 같은 값을
    반환해야 한다. 그리고 컴포넌트의 상탯값을 수정할 때는 기존 값을 변경하는게 아니라 새로운 객체를 생성해야 한다.

    리액트는 UI 라이브러리이기 때문에 UI를 제외한 나머지 요소들은 개발자가 신경 써서 관리해야 한다. 하나의 웹 어플리케이션을
    만들기 위해서는 테스트 시스템, 빌드 시스템, 라우팅 시스템 등 UI 외에도 신경 써야 할 부분이 많다.

1.2.3 웹팩의 기본개념
    웹팩은 자바스크립트로 만든 프로그램을 배포하기 좋은 형태로 묶어 주는 도구이다. 웹사이트 제작 방식이 단일 페이지 애플리케이션으로
    전환되면서 한 페이지에도 자바스크립트 파일이 수십 또는 수백 개 필요했기 때문에 기존방식이 통하지 않게 됬다.
    전통적인 방식의 웹개발은 계속 늘어나는 자바스크립트 파일을 관리하기 힘들다. 파일 간의 의존성 때문에 선언되는 순서를 신경 써야 하기
    때문이다.

1.5 단일 페이지 어플리케이션
    리액트 어플리케이션의 페이지 전환은 단일 페이지 애플리케이션(single page application, SPA) 방식으로 개발하는 것이 정석이다.
    단일 페이지 어플리케이션은 초기 요청 시 서버에서 첫 페이지를 처리하고, 이 후의 라우팅은 클라이언트에서 처리하는 웹 어플리케이션이다.
    전통적인 방식의 웹 페이지는 페이지를 전환할 때마다 렌더링 결과를 서버에서 받기 때문에 화면이 깜빡이는 단점이 있었다.

1.5.1 브라우저 히스토리 API
    단일 페이지 애플리케이션 구현이 가능하려면 다음 두 가지 기능이 필요하다.
        (1) 자바스크립트에서 브라우저로 페이지 전환 요청을 보낼 수 있다. 단, 브라우저는 서버로 요청을 보내지 않아야 한다.
        (2) 브라우저의 뒤로 가기와 같은 사용자의 페이지 전환 요청을 자바스크립트에서 처리할 수 있다. 이 때도 브라우저는 서버로 요청을 보내지 않아야 한다.
    이러한 조건을 만족하는 브라우저 API는 pushState, replaceState 함수와 popState 이벤트이다. API 이름에서 알 수 있듯이 브라우저에는 히스토리에
    state를 저장하는 스택(stack)이 존재한다. 